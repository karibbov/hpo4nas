"""
This package defines an organized way of accessing the different features of the HPO for NAS project.
"""
from pathlib import Path

from src.optimizers.dehb_optimizer import run_dehb
from src.optimizers.naslib_opt import run_naslib_opt
from src.utils.config import load_yaml_config
from src.utils.nasbench201_configspace import save_configspace, run_rs


def run_optimizer(optimizer='rs',  search_space='nasbench201', dataset='cifar10', seed: int = None, output_path="./"):
    """
    Runs an optimizer on the given search space.

    :param output_path: the path for the output files generated by the optimizer
    :param search_space: the name of the search space as a string
    :param dataset: the dataset that the picked architectures will be trained on, as a string
    :param seed: the seed for the optimizer run, used for reproducibility
    :param optimizer: the name of the optimizer as a string
    """
    if optimizer == 'rs':
        run_rs(output_path=output_path, budgets=[10, 20, 30], n_models_per_budget=10)
    elif optimizer == 'dehb':
        run_dehb(search_space, dataset, seed, output_path)
    elif optimizer == 're':
        run_naslib_opt(search_space, dataset, seed, output_path)
    elif optimizer == 'smac':
        raise NotImplementedError("SMAC has not yet been implemented.")
    else:
        raise NameError('invalid optimizer name "{}"'.format(optimizer))


def main(path_to_config: str):
    """
    Reads configuration file and runs an optimization based on that.
    """
    config_dict = load_yaml_config(path_to_config)
    optimizer = config_dict['optimizer']
    search_space = config_dict['search_space']
    dataset = config_dict['dataset']
    seed = config_dict['seed']
    optimizer_output_path = f"results/{optimizer}/{search_space}/{dataset}/seed-{seed}"
    # Create directory structure in advance to avoid possible errors
    Path(optimizer_output_path).mkdir(parents=True, exist_ok=True)

    save_configspace(output_path=optimizer_output_path, file_name="configspace")

    run_optimizer(optimizer=optimizer,
                  search_space=search_space,
                  dataset=dataset,
                  seed=seed,
                  output_path=optimizer_output_path)


# TODO define a way to run main with command line arguments that can overwrite the config file entries
if __name__ == '__main__':
    main("configs/config.yaml")

