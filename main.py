"""
This package defines an organized way of accessing the different features of the HPO for NAS project.
"""
from pathlib import Path

from src.optimizers.dehb_optimizer import run_dehb
from src.optimizers.naslib_opt import run_naslib_opt
from src.utils.config import load_yaml_config
from src.utils.nasbench201_configspace import save_configspace, run_rs


def run_optimizer(config: dict, output_path="./"):
    """
    Reads the configuration dictionary and runs an optimizer on the given search space.

    :param config: the configuration for the optimization as a dictionary
    :param output_path: the path for the output files generated by the optimizer
    """
    optimizer = config['optimizer']

    if optimizer == 'rs':
        run_rs(config, output_path)
    elif optimizer == 'dehb':
        run_dehb(config, output_path)
    elif optimizer == 're':
        run_naslib_opt(config, output_path)
    elif optimizer == 'smac':
        raise NotImplementedError("SMAC has not yet been implemented.")
    else:
        raise NameError('invalid optimizer name "{}"'.format(optimizer))


def main(path_to_config: str):
    """
    Reads configuration file, creates the output path for the optimizer and runs an optimization based on these.
    """
    config: dict = load_yaml_config(path_to_config)
    output_path = f"results/{config['optimizer']}/{config['search_space']}/{config['dataset']}/seed-{config['seed']}"

    # Create directory structure in advance to avoid possible errors
    Path(output_path).mkdir(parents=True, exist_ok=True)

    save_configspace(output_path=output_path, file_name="configspace")

    run_optimizer(config=config, output_path=output_path)


# TODO define a way to run main with command line arguments that can overwrite the config file entries
if __name__ == '__main__':
    main("configs/config.yaml")

